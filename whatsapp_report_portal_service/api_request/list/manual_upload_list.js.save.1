/*
API that allows your frontend to communicate with your backend server (Node.js) for processing and retrieving data.
To access a MySQL database with Node.js and can be use it.
This page is used in template function which is used to get a single template
details.

Version : 1.0
Author : Madhubala (YJ0009)
Date : 05-Jul-2023
*/
// Import the required packages and libraries
const db = require("../../db_connect/connect");
const main = require('../../logger')
const env = process.env;
require('dotenv').config();
const api_url = env.API_URL;

var axios = require('axios');
// ManualUploadList - start
async function ManualUploadList(req) {
    try {

        var logger_all = main.logger_all
        //  Get all the req header data
        const header_token = req.headers['authorization'];
        var user_id = req.body.user_id;
        // query parameters
        logger_all.info("[ManualUploadList query parameters] : " + JSON.stringify(req.body));
        // To get the User_id
        //var get_user = `SELECT * FROM user_management where bearer_token = '${header_token}' AND usr_mgt_status = 'Y'`;
        var get_user = `SELECT * FROM user_management where bearer_token = '${header_token}' AND usr_mgt_status = 'Y'`

        if (user_id) {
            get_user = get_user + `and user_id = '${user_id}' `;
        }

        logger_all.info("[select query request] : " + get_user);
        const get_user_id = await db.query(get_user);
        logger_all.info("[select query response] : " + JSON.stringify(get_user_id));

        if (get_user_id.length == 0) { // If get_user not available send error response to client in ivalid token
            logger_all.info("Invalid Token")
            return { response_code: 0, response_status: 201, response_msg: 'Invalid Token' };
        }

        //var manual_list = `SELECT cwt.*,usr.user_name FROM whatsapp_report_${user_id}.compose_whatsapp_tmpl_${user_id} cwt left join whatsapp_report.user_management usr on cwt.user_id = usr.user_id  where usr.parent_id = '${user_id}' and cwt.whatsapp_status = 'P'`
        //var manual_list = `SELECT cwt.*,usr.user_name FROM whatsapp_report_${user_id}.compose_whatsapp_tmpl_${user_id} cwt left join whatsapp_report.user_management usr on cwt.user_id = usr.user_id  where usr.parent_id = '${user_id}' and cwt.whatsapp_status = 'P'`

      //  var manual_list = "SELECT cwt.*, usr.user_name, SUM(CASE WHEN cws.report_group = 'pj' THEN 1 ELSE 0 END) AS count_pj, SUM(CASE WHEN cws.report_group = 'yj' THEN 1 ELSE 0 END) AS count_yj FROM whatsapp_report_" + user_id + ".compose_whatsapp_tmpl_" + user_id + " cwt LEFT JOIN whatsapp_report.user_management usr ON cwt.user_id = usr.user_id LEFT JOIN whatsapp_report_" + user_id + ".compose_whatsapp_status_tmpl_" + user_id + " cws ON cwt.compose_whatsapp_id = cws.compose_whatsapp_id WHERE usr.parent_id = 1 AND cwt.whatsapp_status = 'P' GROUP BY cwt.compose_whatsapp_id";

	//var manual_list = "SELECT cwt.*, usr.user_name, SUM(CASE WHEN cws.report_group = 'pj' AND cws.campaign_status != 'Y' THEN 1 ELSE 0 END) AS count_pj,SUM(CASE WHEN cws.report_group = 'yj' AND cws.campaign_status != 'Y' THEN 1 ELSE 0 END) AS count_yj FROM whatsapp_report_" + user_id + ".compose_whatsapp_tmpl_" + user_id + " cwt LEFT JOIN whatsapp_report.user_management usr ON cwt.user_id = usr.user_id LEFT JOIN whatsapp_report_" + user_id + ".compose_whatsapp_status_tmpl_" + user_id + " cws ON cwt.compose_whatsapp_id = cws.compose_whatsapp_id WHERE cwt.whatsapp_status = 'P' GROUP BY cwt.compose_whatsapp_id";

	const userIdQuery = "SELECT user_id FROM whatsapp_report.user_management";
        const userIds = await db.query(userIdQuery);
	
        var manual_list = ""
        // Loop through each user ID
        for (let i = 0; i < userIds.length; i++) {
            const user_id = userIds[i].user_id;

	manual_list = manual_list + 
		"SELECT cwt.campaign_name, cwt.campcwt.message_type, cwt.total_mobileno_count, cwt.whatsapp_status, cwt.compose_whatsapp_id,cwt.whatsapp_entry_date, cwt.user_id, usr.user_name, SUM(CASE WHEN cws.report_group = 'TGBase' AND cws.delivery_status is NULL THEN 1 ELSE 0 END) AS count_pj, " +
		"SUM(CASE WHEN cws.report_group = 'CGBase' AND cws.delivery_status is NULL THEN 1 ELSE 0 END) AS count_yj " +
		"FROM whatsapp_report_" + user_id + ".compose_whatsapp_tmpl_" + user_id + " cwt " +
		"LEFT JOIN whatsapp_report.user_management usr ON cwt.user_id = usr.user_id " +
		"LEFT JOIN whatsapp_report_" + user_id + ".compose_whatsapp_status_tmpl_" + user_id + " cws ON cwt.compose_whatsapp_id = cws.compose_whatsapp_id " +
		"WHERE cwt.whatsapp_status in ('P','V') GROUP BY cwt.compose_whatsapp_id UNION ";

	
            // Process the approval details for the current user ID
            console.log(`Manual list details for user ID ${user_id}:`, manual_list);
        }
//        manual_list = manual_list.slice(0,-7)
	manual_list = manual_list.slice(0,-7)+` ORDER BY whatsapp_entry_date DESC`
        logger_all.info("[select query request] : " + manual_list);


        logger_all.info("[select query request] : " + manual_list + " order by whatsapp_entry_date");
        const get_report = await db.query(manual_list);
        logger_all.info("[select query response] : " + JSON.stringify(get_report + " order by whatsapp_entry_date"))


        var mobile_no_list = `SELECT cwt.*,usr.user_name,cwst.mobile_no FROM whatsapp_report_${user_id}.compose_whatsapp_tmpl_${user_id} cwt left join user_management usr on cwt.user_id = usr.user_id left join whatsapp_report_${user_id}.compose_whatsapp_status_tmpl_${user_id} cwst  on cwst.compose_whatsapp_id = cwt.compose_whatsapp_id where usr.parent_id = '${user_id}' and cwt.whatsapp_status = 'P' and cwst.comwtap_status = 'N';`
        logger_all.info("[select query request] : " + mobile_no_list);
        const get_mobile_no = await db.query(manual_list);
        logger_all.info("[select query response] : " + JSON.stringify(get_mobile_no))
        if (get_report.length == 0) {
            return { response_code: 0, response_status: 201, response_msg: 'Template not available' };
        } else {
            return { response_code: 1, response_status: 200, response_msg: 'Success', num_of_rows: get_report.length, report: get_report ,pending_mobile_no : get_mobile_no,pending_mobileno_count : get_mobile_no.length };
        }


    }
    catch (e) { // any error occurres send error response to client
        logger_all.info("[ManualUploadList failed response] : " + e)
        return { response_code: 0, response_status: 201, response_msg: 'Error Occurred ' };
    }
}
// ManualUploadList - end

module.exports = {
    ManualUploadList
};
